from aiogram.types import CallbackQuery, Message
from aiogram import Router, F
from keyboards import Pagination, paginator, Services, pre_buy_kb, ready_to_buy, home_kb
from contextlib import suppress
from aiogram.exceptions import TelegramBadRequest
from test import get_services, get_fullname, get_info_id, make_order, get_order_info
from aiogram.types import InputMediaPhoto as IMP, URLInputFile
import database as db
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from decimal import Decimal as dec


rt = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@rt.callback_query(Pagination.filter())
async def pagination_handler(call: CallbackQuery, callback_data: Pagination):
    page = callback_data.page
    current_level = callback_data.current_level
    condition = callback_data.condition
    action = callback_data.action
    if action == 'cancel':
        with suppress(TelegramBadRequest):
            input_photo = URLInputFile(url='https://masterpiecer-images.s3.yandex.net/0a6b97ed730b11ee98d5222e7fa838a6:upscaled')
            img = IMP(media=input_photo)
            await call.message.edit_media(media=img, reply_markup=await paginator(page=page, current_level=current_level, condition=condition))
    else:
        with suppress(TelegramBadRequest):
            await call.message.edit_reply_markup(reply_markup=await paginator(page=page, current_level=current_level, condition=condition))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤ "–£—Å–ª—É–≥–∏"
@rt.callback_query(Services.filter())
async def services_handler(call: CallbackQuery, callback_data: Services):
    current_level = callback_data.current_level
    condition = callback_data.condition
    if current_level == 3:
        full_name = await get_fullname(condition)
        service_id = await get_services(4, full_name)
        txt = await get_services(3, full_name)
        await call.answer(full_name)
        input_photo = URLInputFile(url='https://masterpiecer-images.s3.yandex.net/6de65abc763c11ee9986baea8797b5f2:upscaled')
        img = IMP(media=input_photo, caption=txt, parse_mode='HTML')
        await call.message.edit_media(img, reply_markup=await pre_buy_kb(service_id))
    else:
        if current_level == 1:
            push_up = await get_fullname(condition, 'network')
        else:
            push_up = await get_fullname(condition, 'category')
        await call.answer(push_up)
        with suppress(TelegramBadRequest):
            await call.message.edit_reply_markup(reply_markup=await paginator(current_level=current_level, condition=condition))


@rt.callback_query(F.data == 'referal_system')
async def referal_system_menu(call: CallbackQuery):
    txt = ('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞.üéÉ\n–¢—ã –ø–æ–ª—É—á–∞–µ—à—å 5 % —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –≠—Ç–æ—Ç –∫—ç—à –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç —Ç–µ–±–µ '
           '–º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞ —Ç–≤–æ–π —Å—á—ë—Ç.üëõ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∏–∫–∞–∫–∏—Ö –Ω–µ—Ç, –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –≤—Å—ë –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å, –∞ –º–æ–∂–µ—à—å –∫–æ–ø–∏—Ç—å –¥–æ –ª—É—á—à–∏—Ö –≤—Ä–µ–º—ë–Ω!üé±\n'
           '–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:')
    await call.message.answer(txt)
    await call.message.answer(f'`https://t.me/Boost_Panelka_BOT?start=kentId{call.from_user.id}`', parse_mode='MARKDOWN')


@rt.callback_query(F.data == 'support')
async def support(call: CallbackQuery):
    await call.message.answer_sticker('CAACAgIAAxkBAAOtZmhe2ZwR2Me5Y-4wHeR5FrI155MAAp8VAAJdWchLRA2tcFujbLk1BA')
    await call.message.answer('–í—Å–µ–≥–¥–∞ —Ö–æ—Ç–µ–ª –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–æ–ºüòÅ! –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –æ—â—É—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ ;) @worker_workaem', parse_mode=None)


@rt.callback_query(F.data == 'top_up')
async def top_up(call: CallbackQuery, state: FSMContext):
    await state.set_state(Form.payment)
    await call.message.answer('–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(—á–∏—Å–ª–æ)?')


class Form(StatesGroup):
    wallet = State()
    id = State()
    price = State()
    min = State()
    max = State()
    name = State()
    quantity = State()
    link = State()
    promo_info = State()
    purchase_info = State()
    payment = State()
    deal_done = State()


@rt.callback_query(F.data.startswith('buy_'))
async def buy_handler(call: CallbackQuery, state: FSMContext):
    user_info = await db.get_user_info(call.from_user.id)
    wallet = user_info[-1]
    service_id = call.data.split('_')[1]
    info = await get_info_id(service_id)
    await state.update_data(id=service_id, price=info[0], name=info[1], wallet=wallet, min=info[2], max=info[3])
    await state.set_state(Form.quantity)
    await call.message.answer('–û–∫–µ–π, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æüí´:', reply_markup=home_kb)


@rt.message(Form.quantity)
async def form_quantity(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        data = await state.get_data()
        if data['min'] <= int(msg.text) <= data['max']:
            await state.update_data(quantity=msg.text)
            await state.set_state(Form.link)
            await msg.answer('–¢–µ–ø–µ—Ä—å —Å—Å—ã–ª–∫—É:', reply_markup=home_kb)
            checks = await db.get_checks(msg.from_user.id)
            if checks:
                for check in checks[0]:
                    if check[2] == data['id']:
                        await state.set_state(Form.promo_info)
                        break
        else:
            await msg.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞', reply_markup=home_kb)
    else:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞', reply_markup=home_kb)


@rt.message(Form.link)
async def form_link(msg: Message, state: FSMContext):
    if 'https://' in msg.text or '.ru' in msg.text or '.com' in msg.text or 't.me/' in msg.text:
        await state.update_data(link=msg.text)
        checks = await db.get_checks(msg.from_user.id)
        data = await state.get_data()
        cost = dec(str(data['price'])) * int(data['quantity'])
        result_cost = cost
        promo = '–Ω–æ—É–ø'
        if checks:
            for check in checks:
                if check[2] == data['id']:
                    promo = f'–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç {check[4]} –ø–æ–ª—É—á–∞–µ—Ç–µ —Ö–∞–ª—è–≤—ã –≤ –∫–æ–ª-–≤–µ {check[5]}'
                    cost = dec(str(data['price'])) * data['quantity']
                    result_cost = dec(str(data['price'])) * (data['quantity'] - check[5])
                    break
        cost.normalize()
        result_cost.normalize()
        txt = f'''
üìù–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}
üìä–ö–æ–ª-–≤–æ: {data['quantity']}
üí∏–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}
üìë–ü—Ä–æ–º–æ–∫–æ–¥: {promo}
üíµ–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result_cost}
'''
        await msg.answer(txt, reply_markup=await ready_to_buy())
    else:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞', reply_markup=home_kb)


@rt.callback_query(F.data == 'ready_to_buy1')
async def ready_to_buy1(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if dec(str(data['wallet'])) > int(data['quantity']) * dec(str(data['price'])):
        await state.clear()
        response = await make_order(data['id'], data['link'], data['quantity'])
        print(response)
        order_info = await get_order_info(response['order'])
        print(order_info)
        print(order_info['charge'])
        await db.add_order(call.from_user.id, response['order'], order_info['charge'] * 2, data['quantity'], order_info['status'], data['id'])
    else:
        await state.set_state(Form.payment)
        await call.message.answer(f'–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ü§∑‚Äç‚ôÇÔ∏è‚Äç. –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å(—á–∏—Å–ª–æ)?', reply_markup=home_kb)


@rt.message(Form.payment)
async def form_payment(msg: Message, state: FSMContext):
    amount = msg.text
    if amount.isdigit():
        await msg.answer(
            f'–ü—Ä–∏—à–ª–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Å—é–¥–∞ - [@worker_workaem](https://t.me/worker_workaem)\n'
            f'`–ö—Éüëã! –•–æ—á—É –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ Boost Panelka –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±–ª–µ–π!'
            f' –ú–æ–π user id - {msg.from_user.id}`',
            parse_mode='MARKDOWN', reply_markup=home_kb)
        await state.clear()
    else:
        await msg.answer('–ß–∏—Å–ª–æ –Ω—É–∂–Ω–æ, –Ω–∞–ø–∏—Å–∞–Ω–æ –∂–µü§¶‚Äç‚ôÇÔ∏è', reply_markup=home_kb)


# @rt.message(Form.required_wallet)
# async def form_wallet(msg: Message, state: FSMContext):
#     user_info = db.get_user_info(msg.from_user.id)
#     if user_info[-1]