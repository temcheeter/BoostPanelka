import asyncio
from config import *
from aiogram import Dispatcher, Bot, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from keyboards import main_kb, paginator
from random import choice
from handlers import profile
import callback
import database as db
from test import updater
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.context import StorageKey


bot = Bot(token, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()
dp.include_routers(profile.rt, callback.rt)
asyncio.run(db.check_db())


@dp.message(CommandStart())
async def start(msg: Message):
    await msg.answer('–°–∞–ø, –±—Ä–æü§ô. –Ø –±–æ—Ç –ø–æ smm –Ω–∞–∫—Ä—É—Ç–∫–µ. –û—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ TikTok –¥–æ –≥–æ–ª–æ—Å–æ–≤ –≤ Telegram) '
                     '–¶–µ–Ω—ã —á–∏—Å—Ç–æ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ, –∫—Å—Ç–∞—Ç–∏ –º–æ–∂–µ—à—å —á–µ–∫–Ω—É—Ç—å ‚ù§', reply_markup=main_kb)
    if not await db.get_user_info(msg.from_user.id):
        ref_id = msg.text.split('kentId')[-1]
        if ref_id[0] != '/' and ref_id != msg.from_user.id:
            await db.add_user(msg.from_user.id, 0, 0, ref_id)
        else:
            await db.add_user(msg.from_user.id, 0, 0)


    # await asyncio.sleep(5)
    # await msg.answer('–ü—Å—Å, —Ç—É—Ç –ø–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç, —á—Ç–æ –ø–æ—Å–ª–µ 3 –ø–æ–∫—É–ø–æ–∫ —Ç—ã —Å–º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –°–º–µ—à–∞—Ä–∏–∫–æ–º!! –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Åü§©')


@dp.message(F.text == '/admin')
async def admin(msg: Message):
    if msg.from_user.id in admin_id:
        img = choice(admin_gif)
        await msg.answer_animation(img)
    else:
        await msg.answer('–ó–µ–ª–µ–Ω')


@dp.message(F.text == '‚ù§–ü–æ–º–æ—â—å‚ù§')
async def support(msg: Message):
    await msg.answer_sticker('CAACAgIAAxkBAAOtZmhe2ZwR2Me5Y-4wHeR5FrI155MAAp8VAAJdWchLRA2tcFujbLk1BA')
    await msg.answer('–í—Å–µ–≥–¥–∞ —Ö–æ—Ç–µ–ª –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–æ–ºüòÅ! –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –æ—â—É—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ ;) @worker_workaem')


@dp.message(F.text == 'üë†–£—Å–ª—É–≥–∏üë†')
async def support(msg: Message):
    await msg.answer_photo('https://masterpiecer-images.s3.yandex.net/0a6b97ed730b11ee98d5222e7fa838a6:upscaled', reply_markup=await paginator())


@dp.message(F.text == '‚§µ–î–æ–º–æ–π‚§µ')
async def to_home(msg: Message='', user_id=0):
    if not user_id:
        user_id = msg.from_user.id
    state_with: FSMContext = FSMContext(
    storage=dp.storage,
    key=StorageKey(
        chat_id=user_id,
        user_id=user_id,
        bot_id=bot.id))
    await state_with.clear()
    await msg.answer('–î–æ–º –º–∏–ª—ã–π –¥–æ–ºüòä', reply_markup=main_kb)


# @dp.message()
# def sticker(msg: Message):
#     print(msg.sticker.file_id)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


async def main_wrapper():
    global services
    await asyncio.gather(
        main(),
        updater()
    )


if __name__ == '__main__':
    asyncio.run(main_wrapper())
